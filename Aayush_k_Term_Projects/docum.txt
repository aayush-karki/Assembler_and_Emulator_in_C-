/// 
    /// @brief Op code are the intrusction that are to be performed
    /// 
    /// There are two different type of Op codes. 
    /// First type of Op codes that are not supported in 
    ///     the machine language, but are used by the assembler.
    ///     (ORG, END, DC, DS)
    /// And Second type of Op codes are supported in both machine language
    ///     and assembler language. These Op codes have a corresponding number
    ///     that are used by the machine language.
    /// 
    /// When using Op codes, they can be all upper cased, or lowered cased, 
    ///     or a combination of both
    /// 
    /// @note Addr is a label in assembley language 
    ///     and a location in machine language
    /// @note when used in machine languge numbers are used to represent
    ///     both the op codes and label/location
    /// @note c(Addr) is the content that label represents in assembley language
    ///     or stored in that location in memory
    /// @note read AddrA <-- c(AddrB) + c(AddrC) as storing the final result
    ///     of operation in right of '<--' (here, c(AddrB) + c(AddrC) ) in to the 
    ///     location or label in the left
    /// @note number of label/location right of <-- determines the number of 
    ///     label/location need for the particular Op code
    /// 
        // ======================= Op Code used in only assemble  =======================
2)      OP_ORG = 0,            ///< usage: ORG 100 \n define origin. \n 
                        ///         The operand specifies the address at which the
                        ///         translation of the next instruction will be generated \n
                        ///         Here, next intruction starts at location 100
3)      OP_DC = 0,             ///< usage: Addr1 DC 5 \n Defines constant. \n 
                        ///         The constant is a decimal integer placed in the operand field \n
                        ///         Here, c(Addr1) = 5
3)      OP_DS = 0,             ///< usage: Addr1 DS 3 \n Defines storage. \n 
                        ///         The operand specifies the number of words of storage to be set aside \n
                        ///         Here, Addr1 points to the start of a array of length 3
   >>>  OP_END = 0,             ///< usage: END \n Indicates that there are no additional statements to translate.
        
        // ======== Op Code used in both assemble and machine level language ==================
        OP_ADD = 1,        ///< usage: ADD Addr1 Addr2 \n Addr1 <-- c(Addr1) + c(Addr2)
        OP_SUB = 2,        ///< usage: SUB Addr1 Addr2 \n Addr1 <-- c(Addr1) - c(Addr2)
        OP_MULT = 3,       ///< usage: MULT Addr1 Addr2 \n Addr1 <-- c(Addr1)* c(Addr2)
        OP_DIV = 4,        ///< usage: DIV Addr1 Addr2 \n Addr1 <-- c(Addr1) / c(Addr2)
        OP_COPY = 5,       ///< usage: COPY Addr1 Addr2 \n Addr1 <-- c(Addr2)
2)      OP_READ = 7,       ///< usage: READ Addr1 \n Read Addr 1 A line is read and
                        ///         record the number found there in Addr1
        OP_WRITE = 8,      ///< usage: WRITE Addr1 \n c(Addr1) is displayed
        OP_B = 9,          ///< usage: B Addr1 \n Go to Addr1 for next instruction
        OP_BM = 10,        ///< usage: BM Addr1 Addr2 \n Go to Addr1 if c(Addr2) < 0
        OP_BZ = 11,        ///< usage: BZ Addr1 Addr2 go To Addr1 if c(Addr2) = 0
        OP_BP = 12,        ///< usage: BP Addr1 Addr2 go To Addr1 if c(Addr2) > 0
        OP_HALT = 13      ///< usage: HALT \n Terminate execution. The Addr1 and Addr2 are ignored
        

In assembler.cpp -> passII->after         
        // it is assembly code
        else
        {  
            // validating if Opcode is ORG, DC or DS 
            // and if their Operand 1 is a label it points to a constant number
            ValidateOperand1Lab( lineCounter );

            // if Opcode is ADD, SUB, MULT, or DIV then if their Operand 2 is a label
            // check if that label points to a constant
            ValidateOperand2Lab( lineCounter );

In assemble.h -> in private function definetion
    /// 
    /// @brief ValidateOperand1Lab checks to see if Label in Operand1 points to a constant
    /// 
    /// ValidateOperand1Lab only checks if operand 1 of ORG, DC or DS is a label 
    ///     and if it is it checkes if it points to a constant
    /// 
    /// If the the Label does not point to a declared constant number
    ///     it reports a error
    /// 
    /// @param a_LineCounter current line number, necessary to falg error reports
    /// 
    /// @returns ValidateOperand1Lab returns true if it does else false
    /// 
    bool ValidateOperand1Lab( int a_LineCounter );

    /// 
    /// @brief ValidateOperand2Lab checks to see if Label in Operand2 points to a constant
    /// 
    /// ValidateOperand2Lab only checks if operand 1 of  ADD, SUB, MULT, or DIV is a label 
    ///     and if it is it checkes if it points to a constant
    /// 
    /// If the the Label does not point to a declared constant number
    ///     it reports a error
    /// 
    /// @param a_LineCounter current line number, necessary to falg error reports
    /// 
    /// @returns ValidateOperand2Lab returns true if it does else false
    /// 
    bool ValidateOperand2Lab( int a_LineCounter );

In Assemble.cpp -> at the end of the file

bool Assembler::ValidateOperand1Lab(int a_LineCounter )
{
    // if Opcode is ORG, DC or DS and if their Operand 1
    // is a label it points to a constant number
    if( ( m_inst.GetOpCodeNum() >= 100 && m_inst.GetOpCodeNum() <= 300 ) &&
        !m_inst.IsNumOperand1() )
    {
        // checking if the label present in the declaredConstantTable
        if( m_declaredConstTab.find( m_inst.GetOperand1() ) == m_declaredConstTab.end() )
        {
            // label does not exist in declared Constant table
            // report the error
            std::string errorMessage = "Line--" + a_LineCounter;
            errorMessage.append( "--ERROR--Operand 1 does not point to a label which stores constant number" );
            Errors::RecordError( errorMessage );
            return false;
        }
    }
    return true; // no error
}

bool Assembler::ValidateOperand2Lab( int a_LineCounter )
{
    // if Opcode is ADD, SUB, MULT, or DIV then if their Operand 2 is a label
    // check if that label points to a constant
    if( ( m_inst.GetOpCodeNum() >= 1 && m_inst.GetOpCodeNum() <= 4 ) &&
        !m_inst.IsNumOperand2() )
    {
        // checking if the label present in the declaredConstantTable
        if( m_declaredConstTab.find( m_inst.GetOperand2() ) == m_declaredConstTab.end() )
        {
            // label does not exist in declared Constant table
            // report the error
            std::string errorMessage = "Line--" + a_LineCounter;
            errorMessage.append( "--ERROR--Operand 2 does not point to a label which stores constant number" );
            Errors::RecordError( errorMessage );
            return false;
        }
    }
    return true; // no error
}
